= Developer notes

:fn-hall-21: footnote:hall-21[https://www.freedos.org/.  Retrieved on 15 August 2021.]
:fn-uefi-21: footnote:uefi-21[UEFI Forum.  Unified Extensible Firmware Interface (UEFI) Specification: Version 2.9.  March 2021.  https://uefi.org/sites/default/files/resources/UEFI_Spec_2_9_2021_03_18.pdf.]

  * big fluffy goal: boot and run FreeDOS{fn-hall-21} on a UEFI{fn-uefi-21} PC

---

=== Relevant standards (and "standards")

:fn-brown-00: footnote:brown-00[Brown, Ralf.  The x86 Interrupt List.  16 July 2000.  http://www.cs.cmu.edu/~ralf/files.html.]
:fn-pci-05: footnote:pci-05[PCI-SIG.  PCI Firmware Specification: Revision 3.0.  June 2005.]
:fn-uefi-20: footnote:uefi-20[UEFI Forum.  UEFI Platform Initialization (PI) Specification: Version 1.7 Errata A.  April 2020.  https://uefi.org/sites/default/files/resources/PI_Spec_1_7_A_final_May1.pdf.]
:fn-uefi-21b: footnote:uefi-20b[UEFI Forum.  Advanced Configuration and Power Interface (ACPI) Specification: Version 6.4.  January 2021.  https://uefi.org/sites/default/files/resources/ACPI_Spec_6_4_Jan22.pdf.]
:fn-usefulvideos-22: footnote:fn-usefulvideos-22[https://github.com/tkchia/biefircate/discussions/4.  Retrieved on 4 Jan 2022.]

  * the hope is that `biefircate` can implement at least the BIOS interrupts and parts of the BIOS data area described in RBIL{fn-brown-00}
  ** intrs. `0x00`—`0x1f` (incl. `0x08`—`0x0f` for IRQs 0—7)
  ** intrs. `0x70`—`0x77` for IRQs 8—15
  ** the BIOS data area `0x40:0`—`0x50:0`
  ** maybe also intrs. `0x40` (relocated diskette I/O) and `0x42` (relocated video output services)
  ** no need for `biefircate` to implement MS-DOS intrs. (`0x20`—`0x33` etc.)
  * `biefircate` should also properly initialize any option ROMs for PCI devices — PCI firmware spec.{fn-pci-05} says how
  * we assume the PC firmware
  ** implements UEFI{fn-uefi-21}
  ** has some PCI support
  ** has a legacy-style PCI option ROM for the VGA device
  *** maybe in future, add stub support for machines that lack a VGA option ROM?{fn-usefulvideos-22}
  ** has some ACPI tables{fn-uefi-21b} which report what features the underlying system has
  *** `biefircate` will likely not support ACPI in its full generality; the spec. is extremely complex
  * some PCs — but not all — allow bootloaders to access the firmware volume protocol;{fn-uefi-20} this can be used to discover some option ROMs

---

=== Code structure (?)

:fn-intel-21: footnote:intel-21[Intel Corporation.  Intel® 64 and IA-32 Architectures Software Developer's Manual: Volume 3A, pp. 2-17, 4-14—4-19.  June 2021.]
:fn-tis-95: footnote:tis-95[TIS Committee.  Tool Interface Standard (TIS) Executable and Linking Format (ELF) Specification: Version 1.2.  May 1995.  http://refspecs.linuxbase.org/elf/elf.pdf.]
:fn-oconnor-10: footnote:oconnor-10[O'Connor, Kevin.  SeaBIOS in a virtualized environment.  Proc. Linux Plumbers Conference.  2010.  http://wiki.linuxplumbersconf.org/_media/2010:01-lpc-seabios-20101103.pdf.]
:fn-seabios-21: footnote:seabios-21[https://git.seabios.org/.  Retrieved on 30 August 2021.]

  * stage 1 is for stuff that happens before exiting UEFI boot services; stage 2 is for stuff after that
  ** other than the above, there are (currently) no hard and fast rules for delineating the two
  ** stage 1 passes a pointer to a linked list of boot parameters (see link:bparm.h[`bparm.h`]) to stage 2
  * stage 2
  ** currently takes the form of an ELF executable{fn-tis-95}
  ** experimenting with using a patched version of SeaBIOS{fn-oconnor-10}{fn-seabios-21} — patches are meant to make it more easily relocated

---

=== Other notes

:fn-abraham-20: footnote:abraham-20[https://github.com/eyalabraham/new-xt-bios.  Retrieved on 28 August 2021.]
:fn-ibm-86: footnote:ibm-86[International Business Machines Corporation.  IBM: Personal Computer Hardware Reference Library: Technical Reference 6183355, pp. 5-14 et seq.  March 1986.  https://archive.org/details/bitsavers_ibmpcat618ferenceMar86_25829277/page/n245/mode/2up.]
:fn-intel-97: footnote:intel-97[Intel Corporation.  MultiProcessor Specification: Version 1.4.  May 1997.]

  * UEFI stuff
  ** **note:** boot services will be unavailable once bootloader calls `BS->ExitBootServices(, )`
  *** _might_ be possible to implement a BIOS without exiting boot services, but this is non-trivial — UEFI expects to be in control of most system resources, incl. memory, page tables, and IRQs
  * how to correctly interface with PC hardware legacy-style
  ** IBM's published BIOS source code, e.g. PC AT BIOS listings from 1986,{fn-ibm-86} might be useful
  ** also potentially useful is Eyal Abraham's `new-xt-bios`,{fn-abraham-20} a rewrite of the BIOS for an (older) PC XT with partially custom hardware; code is under an MIT License
  * Xv6 will panic if it cannot find MP tables per Intel's (deprecated) MultiProcessor Specification{fn-intel-97}
  ** `biefircate` produces dummy MP tables if `XV6_COMPAT` is defined
  ** other OSes probably do not need MP tables to work
